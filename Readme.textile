This is my home dir, settings for zsh, dot files and so on ...

h1. Installation

Installation is very simple, you just have to clone this repository to your home dir:

@git clone git://github.com/renato2099/.home.git $HOME/.home@

cd into the newly created directory Clone to necessary submodules:

@cd $HOME/.home && git submodule update --init@

cd into the newly created directory and run make install:

@cd $HOME/.home && make install@

.home will then create symlinks in your home dir to adjust $PATH as well as preferences for different tools.

In order to install all, plugins, open vim and enter
@:PluginInstall@

This will usually work for OS X - for other systems (and may be even OS X) you might want to make sure that YCM is compiled. For instance, for Ubuntu, you need to execute the following commands:

@cd $HOME/.vim/bundle/YouCompleteMe@
@./install.py --clang-completer@

Should this fail because the script was unable to find the python libraries, checkout the following post for help:
@http://stackoverflow.com/questions/37277976/vim-youcomplete-me-unable-to-find-an-appropriate-python-library@

Another problem could be that you do not have installed proper python command. For this, install the package vim-gnome-py2 or a similar one.

After the installation completed, run @:PluginInstall@ again.

Additional details for YCM can be found on:
@https://github.com/Valloric/YouCompleteMe@


h2. Auto-Completion for Haskell

If you want to use auto-completion for Haskel, make sure you have ghc-mod, codex, hasktags, and hoogle installed, if not do:
@stack install ghc-mod codex hasktags hoogle@

Also make sure, ghc-mod is on your path. On Ubuntu, for example, this means to add the following lines to your .bashrc and .bash_profile if not already there:
@export PATH=$PATH:$HOME/.local/bin@

To make the Haskel-Plugin work, execute:
@cd $HOME/.vim/bundle/vimproc/@
@make@

To use the Plugin you can run, commands like the following within VIM:
@:GhcModCheck@
@:GhcModLint@

For more information about these helper functions go to:
@https://github.com/eagletmt/ghcmod-vim@

If you have a cabal project, you can execute
@codex update@
This will create a set of tags (codex.tags) that are later used by VIM to not only show auto completion, but even types

h2. Latex Support

As built now, you can also use VIM for latex files. You can commands like
@\ll -- for building@
@zo -- for opening a toggled section@
@zc -- for closing a toggled section@
@vipgq -- for auto alignment@
@z= -- for error correction@

In order to make GVIM work together well with a pdf viewer, install Okular and add the following line to its Editor Options (Custom Text Editor):
@gvim --servername GVIM --remote +%l %f@

From now on you can use "\ls" to jump from GVIM to Okular and "Shift + Mouse" for vice-versa.

